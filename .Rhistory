library(dplyr)
install.packages("devtools")
library(devtools)
install_github("mghamilton/AllocateMate")
library(AllocateMate)
install.packages("devtools")
library(devtools)
install_github("mghamilton/AllocateMate", dependencies = TRUE)
library(AllocateMate)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("mghamilton/AllocateMate", dependencies = TRUE)
library(AllocateMate)
install.packages("devtools")
library(devtools)
install_github("mghamilton/AllocateMate", dependencies = TRUE)
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("mghamilton/AllocateMate", dependencies = TRUE)
library(AllocateMate)
help ("allocate.mate.ped")
help ("allocate.mate.H")
install.packages("devtools")
install_github("mghamilton/AllocateMate", dependencies = TRUE)
library(AllocateMate)
help ("allocate.mate.ped")
help ("allocate.mate.H")
install_github("mghamilton/AllocateMate", dependencies = TRUE, force = TRUE)
library(AllocateMate)
help ("allocate.mate.ped")
help ("allocate.mate.H")
remove.packages(c("lpSolveAPI", "dplyr", "AGHmatrix"))
remove.packages("devtools")
remove.packages("AllocateMate")
install_github("mghamilton/AllocateMate", dependencies = TRUE, force = TRUE)
*   install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("mghamilton/AllocateMate", dependencies = TRUE, force = TRUE)
library(AllocateMate)
help ("allocate.mate.ped")
help ("allocate.mate.H")
install.packages("devtools")
library(devtools)
install_github("mghamilton/AllocateMate", dependencies = TRUE, force = TRUE)
library(AllocateMate)
help ("allocate.mate.ped")
help ("allocate.mate.H")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("mghamilton/AllocateMate", dependencies = TRUE, force = TRUE)
library(AllocateMate)
help ("allocate.mate.ped")
help ("allocate.mate.H")
install.packages("devtools")
if (!requireNamespace("devtools", quietly = TRUE)) {install.packages("devtools")}
library(devtools)
install_github("mghamilton/AllocateMate", dependencies = TRUE, force = TRUE)
library(AllocateMate)
help ("allocate.mate.ped")
help ("allocate.mate.H")
if (!requireNamespace("devtools", quietly = TRUE)) {install.packages("devtools")}
library(devtools)
install_github("mghamilton/AllocateMate", dependencies = TRUE, force = TRUE)
library(AllocateMate)
help ("allocate.mate.ped")
help ("allocate.mate.H")
detach("package:AllocateMate", unload = TRUE)
if (!requireNamespace("devtools", quietly = TRUE)) {install.packages("devtools")}
library(devtools)
install_github("mghamilton/AllocateMate", dependencies = TRUE, force = TRUE)
library(AllocateMate)
help ("allocate.mate.ped")
help ("allocate.mate.H")
if(!requireNamespace("devtools", quietly = TRUE)) {install.packages("devtools")}
library(devtools)
install_github("mghamilton/AllocateMate", dependencies = TRUE, force = TRUE)
library(AllocateMate)
help("allocate.mate.ped")
help("allocate.mate.H")
#Parent selection
rm(list=ls())  #remove objects from current R session
library(dplyr)
setwd("C:/Users/MHamilton/CGIAR/WorldFish DocuShare - Genetics/Training/RGCA/Matt 2024/07 All together/03 Parent selection") #set working directory
####################################################################
# Within family selection
#
# Within family selection doesn't require EBVs or analysis across generations
# It simply requires you to identify the best male and best female(s) from each family
# It is simple and effective in controlling long-term inbreeding but does not optimize genetic gains
#
# Optimal contributions is better but more difficult to apply
#
# This code creates and saves a files named G2_parent_selections.csv and G2_parent_backups.csv
#
#You can do this in Excel !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
###############################################################################
####################################################################
#read is merged data file created and saved above
G2_EBVs <- read.csv("G2_EBVs.csv")
str(G2_EBVs)
#read is merged data file created and saved above
G2_EBVs <- read.csv("G2_EBVs.csv")
head(G2_EBVs)
str(G2_EBVs)
table(G2_EBVs$fam, useNA = "ifany") #Count by family
fam_mean_ordered <- aggregate(ebv ~ fam, data = G2_EBVs, FUN = mean, na.rm = TRUE) #mean ebv by family
fam_mean_ordered <- fam_mean_ordered[order(fam_mean_ordered$ebv, decreasing = T), ] #order families
fam_mean_ordered #print
#Parent selection
rm(list=ls())  #remove objects from current R session
library(dplyr)
setwd("C:/Users/MHamilton/CGIAR/WorldFish DocuShare - Genetics/Training/RGCA/Matt 2024/07 All together/03 Parent selection") #set working directory
####################################################################
# Within family selection
#
# Within family selection doesn't require EBVs or analysis across generations
# It simply requires you to identify the best male and best female(s) from each family
# It is simple and effective in controlling long-term inbreeding but does not optimize genetic gains
#
# Optimal contributions is better but more difficult to apply
#
# This code creates and saves a files named G2_parent_selections.csv and G2_parent_backups.csv
#
#You can do this in Excel !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
###############################################################################
####################################################################
#read is merged data file created and saved above
G2_EBVs <- read.csv("G2_EBVs.csv")
head(G2_EBVs)
str(G2_EBVs)
table(G2_EBVs$fam, useNA = "ifany") #Count by family
fam_mean_ordered <- aggregate(ebv ~ fam, data = G2_EBVs, FUN = mean, na.rm = TRUE) #mean ebv by family
fam_mean_ordered <- fam_mean_ordered[order(fam_mean_ordered$ebv, decreasing = T), ] #order families
fam_mean_ordered #print
# Assuming a 1:3 male:female mating ratio with all three females from the same family AllocateMate
# requires the selection of one male and one female with the highest EBV in each family (at random if there are individuals with the same EBV)
set.seed(1234)
G2_male_selections <- G2_EBVs %>%
sample_frac(1) %>%            # Randomly shuffle the rows
filter(sex == "M") %>% # Keep only males
group_by(fam) %>%
filter(ebv == max(ebv, na.rm = T)) %>%  # Filter by max EBV per sex within each family
slice_head(n = 1) %>%      # select male
ungroup()
G2_male_selections[,c("id", "fam", "ebv")] #print
G2_female_selections <- G2_EBVs %>%
sample_frac(1) %>%            # Randomly shuffle the rows
filter(sex == "F") %>%        # Keep only females
group_by(fam) %>%
arrange(desc(ebv)) %>%        # Sort by EBV in descending order within each family
slice_head(n = 1) %>%         # Select the top female
ungroup()
G2_female_selections[,c("id", "fam", "ebv")] #print
head(G2_female_selections)
G2_parent_selections <- rbind(G2_male_selections, G2_female_selections) #merge males and females
xtabs(~ sex, data=G2_parent_selections) #note that
write.csv(G2_parent_selections, "G2_parent_selections.csv", row.names = F) #save parent selections
xtabs(fam ~ sex, data=G2_parent_selections)
G2_parent_selections[G2_parent_selections$sex == "M", "id"]
G2_parent_selections[G2_parent_selections$sex == "M", "id"] %in%
G2_parent_selections[G2_parent_selections$sex == "F", "id"]
G2_parent_selections[G2_parent_selections$sex == "M", "id"]
G2_female_selections
G2_male_selections$fam %in% G2_female_selections$fam
G2_male_selections$fam[!G2_male_selections$fam %in% G2_female_selections$fam,]
G2_male_selections$fam[!G2_male_selections$fam %in% G2_female_selections$fam]
parents <- G2_parent_selections %>%
group_by(fam, sex) %>%
summarise(mean_ebv = mean(ebv))
parents
#read is merged data file created and saved above
G2_EBVs <- read.csv("G2_EBVs.csv")
head(G2_EBVs)
str(G2_EBVs)
table(G2_EBVs$fam, useNA = "ifany") #Count by family
fam_mean_ordered <- aggregate(ebv ~ fam, data = G2_EBVs, FUN = mean, na.rm = TRUE) #mean ebv by family
fam_mean_ordered <- fam_mean_ordered[order(fam_mean_ordered$ebv, decreasing = T), ] #order families
fam_mean_ordered #print
# Assuming a 1:3 male:female mating ratio with all three females from the same family AllocateMate
# requires the selection of one male and one female with the highest EBV in each family (at random if there are individuals with the same EBV)
set.seed(1234)
G2_male_selections <- G2_EBVs %>%
sample_frac(1) %>%            # Randomly shuffle the rows
filter(sex == "M") %>% # Keep only males
group_by(fam) %>%
filter(ebv == max(ebv, na.rm = T)) %>%  # Filter by max EBV per sex within each family
slice_head(n = 1) %>%      # select male
ungroup()
G2_male_selections[,c("id", "fam", "ebv")] #print
G2_female_selections <- G2_EBVs %>%
sample_frac(1) %>%            # Randomly shuffle the rows
filter(sex == "M") %>% # Keep only females
group_by(fam) %>%
filter(ebv == max(ebv, na.rm = T)) %>%  # Filter by max EBV per sex within each family
slice_head(n = 1) %>%      # select female
ungroup()
G2_female_selections[,c("id", "fam", "ebv")] #print
head(G2_female_selections)
G2_parent_selections <- rbind(G2_male_selections, G2_female_selections) #merge males and females
xtabs(~ sex, data=G2_parent_selections) #note that there are only 50 females but 51 males
G2_male_selections$fam[!G2_male_selections$fam %in% G2_female_selections$fam] #no female from fam "G2_36"
parents <- G2_parent_selections %>%
group_by(fam, sex) %>%
summarise(mean_ebv = mean(ebv))
parents
head(G2_EBVs)
head(G2_male_selections)
head(G2_parent_selections)
female_with_greatest_ebv <- G2_EBVs %>%
filter(sex == "F", !(id %in% G2_parent_selections$id)) %>%  # Exclude IDs in G2_parent_selections$id
slice_max(order_by = ebv, n = 1) %>%  # Find the female with the greatest EBV
pull(id)  # Extract the id
female_with_greatest_ebv
female_with_greatest_ebv <- G2_EBVs %>%
filter(sex == "F", !(id %in% G2_parent_selections$id)) %>%  # Exclude IDs in G2_parent_selections$id
slice_max(order_by = ebv, n = 1)
female_with_greatest_ebv
male_with_greatest_ebv <- G2_EBVs %>%
filter(sex == "M", !(id %in% G2_parent_selections$id)) %>%  # Exclude IDs in G2_parent_selections$id
slice_max(order_by = ebv, n = 1)  # Find the female with the greatest EBV
male_with_greatest_ebv
best_male_from_family <- G2_parent_selections %>%
filter(sex == "M", fam == "G2_36") %>%  # Filter for males in family "G2_36"
slice_max(order_by = ebv, n = 1)
best_male_from_family
best_male_from_family <- best_male_from_family[1,]
best_male_from_family
G2_parent_selections[G2_parent_selections$sex == "M" &
G2_parent_selections$fam == female_with_greatest_ebv$fam,]
head(G2_parent_selections[G2_parent_selections$sex == "M" &
G2_parent_selections$fam == female_with_greatest_ebv$fam,])
head(as.data.frame(G2_parent_selections[G2_parent_selections$sex == "M" &
G2_parent_selections$fam == female_with_greatest_ebv$fam,]))
nrows(G2_parent_selections)
nrow(G2_parent_selections)
nrow(G2_parent_selections[!(G2_parent_selections$sex == "M" &
G2_parent_selections$fam == female_with_greatest_ebv$fam),])
unique(G2_parent_selections)
#Parent selection
rm(list=ls())  #remove objects from current R session
library(dplyr)
setwd("C:/Users/MHamilton/CGIAR/WorldFish DocuShare - Genetics/Training/RGCA/Matt 2024/07 All together/03 Parent selection") #set working directory
####################################################################
# Within family selection
#
# Within family selection doesn't require EBVs or analysis across generations
# It simply requires you to identify the best male and best female(s) from each family
# It is simple and effective in controlling long-term inbreeding but does not optimize genetic gains
#
# Optimal contributions is better but more difficult to apply
#
# This code creates and saves a files named G2_parent_selections.csv
#
#You can do this in Excel !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
###############################################################################
####################################################################
#read is merged data file created and saved above
G2_EBVs <- read.csv("G2_EBVs.csv")
head(G2_EBVs)
str(G2_EBVs)
table(G2_EBVs$fam, useNA = "ifany") #Count by family
fam_mean_ordered <- aggregate(ebv ~ fam, data = G2_EBVs, FUN = mean, na.rm = TRUE) #mean ebv by family
fam_mean_ordered <- fam_mean_ordered[order(fam_mean_ordered$ebv, decreasing = T), ] #order families
fam_mean_ordered #print
# Assuming a 1:3 male:female mating ratio with all three females from the same family AllocateMate
# requires the selection of one male and one female with the highest EBV in each family (at random if there are individuals with the same EBV)
set.seed(1234)
G2_male_selections <- G2_EBVs %>%
sample_frac(1) %>%            # Randomly shuffle the rows
filter(sex == "M") %>% # Keep only males
group_by(fam) %>%
filter(ebv == max(ebv, na.rm = T)) %>%  # Filter by max EBV per sex within each family
slice_head(n = 1) %>%      # select male
ungroup()
G2_male_selections[,c("id", "fam", "ebv")] #print
G2_female_selections <- G2_EBVs %>%
sample_frac(1) %>%            # Randomly shuffle the rows
filter(sex == "F") %>% # Keep only females
group_by(fam) %>%
filter(ebv == max(ebv, na.rm = T)) %>%  # Filter by max EBV per sex within each family
slice_head(n = 1) %>%      # select female
ungroup()
G2_female_selections[,c("id", "fam", "ebv")] #print
head(G2_female_selections)
G2_parent_selections <- rbind(G2_male_selections, G2_female_selections) #merge males and females
xtabs(~ sex, data=G2_parent_selections) #note that there are only 50 females but 51 males
G2_male_selections$fam[!G2_male_selections$fam %in% G2_female_selections$fam] #no female from fam "G2_36"
#We need to modify things due to the lack of females in one family
#One approach is to identify a high ebv female and exclude the male from this family
female_with_greatest_ebv <- G2_EBVs %>%
filter(sex == "F", !(id %in% G2_parent_selections$id)) %>%  # Exclude IDs in G2_parent_selections$id
slice_max(order_by = ebv, n = 1)  # Find the female with the greatest EBV
G2_parent_selections <- rbind(G2_parent_selections, female_with_greatest_ebv)
#Parent selection
rm(list=ls())  #remove objects from current R session
library(dplyr)
setwd("C:/Users/MHamilton/CGIAR/WorldFish DocuShare - Genetics/Training/RGCA/Matt 2024/07 All together/03 Parent selection") #set working directory
####################################################################
# Within family selection
#
# Within family selection doesn't require EBVs or analysis across generations
# It simply requires you to identify the best male and best female(s) from each family
# It is simple and effective in controlling long-term inbreeding but does not optimize genetic gains
#
# Optimal contributions is better but more difficult to apply
#
# This code creates and saves a files named G2_parent_selections.csv
#
#You can do this in Excel !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
###############################################################################
####################################################################
#read is merged data file created and saved above
G2_EBVs <- read.csv("G2_EBVs.csv")
head(G2_EBVs)
str(G2_EBVs)
table(G2_EBVs$fam, useNA = "ifany") #Count by family
fam_mean_ordered <- aggregate(ebv ~ fam, data = G2_EBVs, FUN = mean, na.rm = TRUE) #mean ebv by family
fam_mean_ordered <- fam_mean_ordered[order(fam_mean_ordered$ebv, decreasing = T), ] #order families
fam_mean_ordered #print
# Assuming a 1:3 male:female mating ratio with all three females from the same family AllocateMate
# requires the selection of one male and one female with the highest EBV in each family (at random if there are individuals with the same EBV)
set.seed(1234)
G2_male_selections <- G2_EBVs %>%
sample_frac(1) %>%            # Randomly shuffle the rows
filter(sex == "M") %>% # Keep only males
group_by(fam) %>%
filter(ebv == max(ebv, na.rm = T)) %>%  # Filter by max EBV per sex within each family
slice_head(n = 1) %>%      # select male
ungroup()
G2_male_selections[,c("id", "fam", "ebv")] #print
G2_female_selections <- G2_EBVs %>%
sample_frac(1) %>%            # Randomly shuffle the rows
filter(sex == "F") %>% # Keep only females
group_by(fam) %>%
filter(ebv == max(ebv, na.rm = T)) %>%  # Filter by max EBV per sex within each family
slice_head(n = 1) %>%      # select female
ungroup()
G2_female_selections[,c("id", "fam", "ebv")] #print
head(G2_female_selections)
G2_parent_selections <- rbind(G2_male_selections, G2_female_selections) #merge males and females
xtabs(~ sex, data=G2_parent_selections) #note that there are only 50 females but 51 males
G2_male_selections$fam[!G2_male_selections$fam %in% G2_female_selections$fam] #no female from fam "G2_36"
#We need to modify things due to the lack of females in one family
#One approach is to:
# 1. identify a high ebv female
female_with_greatest_ebv <- G2_EBVs %>%
filter(sex == "F", !(id %in% G2_parent_selections$id)) %>%  # Exclude IDs in G2_parent_selections$id
slice_max(order_by = ebv, n = 1)  # Find the female with the greatest EBV
G2_parent_selections <- rbind(G2_parent_selections, female_with_greatest_ebv)
# 2. exclude the male from this family
G2_parent_selections <- G2_parent_selections[!(G2_parent_selections$sex == "M" &
G2_parent_selections$fam == female_with_greatest_ebv$fam),]
# 3.  identify a the best male from fam "G2_36"
best_male_from_family <- G2_parent_selections %>%
filter(sex == "M", fam == "G2_36") %>%  # Filter for males in family "G2_36"
slice_max(order_by = ebv, n = 1)
best_male_from_family
#Parent selection
rm(list=ls())  #remove objects from current R session
library(dplyr)
setwd("C:/Users/MHamilton/CGIAR/WorldFish DocuShare - Genetics/Training/RGCA/Matt 2024/07 All together/03 Parent selection") #set working directory
####################################################################
# Within family selection
#
# Within family selection doesn't require EBVs or analysis across generations
# It simply requires you to identify the best male and best female(s) from each family
# It is simple and effective in controlling long-term inbreeding but does not optimize genetic gains
#
# Optimal contributions is better but more difficult to apply
#
# This code creates and saves a files named G2_parent_selections.csv
#
#You can do this in Excel !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
#
###############################################################################
####################################################################
#read is merged data file created and saved above
G2_EBVs <- read.csv("G2_EBVs.csv")
head(G2_EBVs)
str(G2_EBVs)
table(G2_EBVs$fam, useNA = "ifany") #Count by family
fam_mean_ordered <- aggregate(ebv ~ fam, data = G2_EBVs, FUN = mean, na.rm = TRUE) #mean ebv by family
fam_mean_ordered <- fam_mean_ordered[order(fam_mean_ordered$ebv, decreasing = T), ] #order families
fam_mean_ordered #print
# Assuming a 1:3 male:female mating ratio with all three females from the same family AllocateMate
# requires the selection of one male and one female with the highest EBV in each family (at random if there are individuals with the same EBV)
set.seed(1234)
G2_male_selections <- G2_EBVs %>%
sample_frac(1) %>%            # Randomly shuffle the rows
filter(sex == "M") %>% # Keep only males
group_by(fam) %>%
filter(ebv == max(ebv, na.rm = T)) %>%  # Filter by max EBV per sex within each family
slice_head(n = 1) %>%      # select male
ungroup()
G2_male_selections[,c("id", "fam", "ebv")] #print
G2_female_selections <- G2_EBVs %>%
sample_frac(1) %>%            # Randomly shuffle the rows
filter(sex == "F") %>% # Keep only females
group_by(fam) %>%
filter(ebv == max(ebv, na.rm = T)) %>%  # Filter by max EBV per sex within each family
slice_head(n = 1) %>%      # select female
ungroup()
G2_female_selections[,c("id", "fam", "ebv")] #print
head(G2_female_selections)
G2_parent_selections <- rbind(G2_male_selections, G2_female_selections) #merge males and females
xtabs(~ sex, data=G2_parent_selections) #note that there are only 50 females but 51 males
G2_male_selections$fam[!G2_male_selections$fam %in% G2_female_selections$fam] #no female from fam "G2_36"
#We need to modify things due to the lack of females in one family
#One approach is to:
# 1. identify a high ebv female
female_with_greatest_ebv <- G2_EBVs %>%
filter(sex == "F", !(id %in% G2_parent_selections$id)) %>%  # Exclude IDs in G2_parent_selections$id
slice_max(order_by = ebv, n = 1)  # Find the female with the greatest EBV
G2_parent_selections <- rbind(G2_parent_selections, female_with_greatest_ebv)
# 2. exclude the male from this family
G2_parent_selections <- G2_parent_selections[!(G2_parent_selections$sex == "M" &
G2_parent_selections$fam == female_with_greatest_ebv$fam),]
# 3.  identify a the best male from fam "G2_36"
best_male_from_family <- G2_parent_selections %>%
filter(sex == "M", fam == "G2_36") %>%  # Filter for males in family "G2_36"
slice_max(order_by = ebv, n = 1)
G2_parent_selections <- rbind(G2_parent_selections, best_male_from_family)
str(G2_parent_selections)
library(AllocateMate)
detach("package:AllocateMate", unload = TRUE)
