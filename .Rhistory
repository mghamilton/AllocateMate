rm(list=ls())
detatch(package = "AllocateMate")
detach(package = "AllocateMate")
remove.packages("AllocateMate")
remove.packages("AllocateMate")
remove.packages("AllocateMate")
remove.packages("AllocateMate")
remove.packages("AllocateMate")
help("allocate.mate.ped")
library(AllocateMate)
help("allocate.mate.ped")
ped <- AllocateMate::ped
parents <- AllocateMate::parents
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
install.packages("roxygen2")
library(roxygen2)
ped <- AllocateMate::ped
parents <- AllocateMate::parents
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
head(parents )
parents$EBV <- NA
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
parents$EBV <- as.numeric(parents$EBV)
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
ped <- AllocateMate::ped
parents <- AllocateMate::parents
parents$EBV <- NA
parents$EBV <- as.numeric(parents$EBV)
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/peripheral_functions.R")
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/peripheral_functions.R")
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
str(parents)
head(parents)
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
rm(outputs)
rm(output)
max_F = 1
method = "min_F"
n_fam_crosses = 1
#Feb 2021
#if("nadiv" %in% installed.packages()[, "Package"] == F) {install.packages("nadiv")}
#library(nadiv)
#library(lpSolveAPI)
#library(AGHmatrix)
#library(dplyr)
#split parents
if(!"N_AS_PARENT" %in% colnames(parents)) {
stop("Column N_AS_PARENT is not present in \'parents\'.")
}
if(!is.integer(parents$N_AS_PARENT)) {
stop("N_AS_PARENT must be a vector of type integer")
}
if(sum(is.na(parents$N_AS_PARENT)) != 0) {
stop("N_AS_PARENT contains missing values")
}
all_candidates <- parents
parents <- parents[parents$N_AS_PARENT > 0,]
#  if(nrow(parents) == nrow(all_candidates)) {
#    all_candidates <-  NULL
#  }
check.parents(parents)
check.ped2(ped)
ped <- reduce.ped(ped = ped, parents = all_candidates)
check.n_fam_crosses(n_fam_crosses)
check.max_F(max_F)
check.method(method)
# if(!is.null(all_candidates)) {
all_candidates <- check.all_candidates(ped, parents, all_candidates)
#  }
#ped <- nadiv::prunePed(ped = ped, phenotyped = parents$ID)
ped[ped$DAM  == 0 & !is.na(ped$DAM), "DAM"]  <- NA
ped[ped$SIRE == 0 & !is.na(ped$SIRE),"SIRE"] <- NA
# ped <- nadiv::prepPed(ped = ped)
ped <- ped.order(pedigree = ped)
ped[is.na(ped$DAM), "DAM"]  <- 0
ped[is.na(ped$SIRE),"SIRE"] <- 0
# H <- makeA(ped)  #unstable with large pedigrees, use Amatrix instead
H <- AGHmatrix::Amatrix(ped)
H <- H[rownames(H) %in% parents$ID, colnames(H) %in% parents$ID]
H <- as.matrix(H)
families <- generate.fams(H = H, ped = ped, parents = parents, max_F = max_F)
if(method == "assortative") {
output <- solve_lp(families = families, parents = parents, n_fam_crosses = n_fam_crosses, max_F = max_F, min_trait = "EBV_dev_squared")
}
if(method == "min_F") {
output <- solve_lp(families = families, parents = parents, n_fam_crosses = n_fam_crosses, max_F = max_F, min_trait = "F")
}
output
if(method == "assortative") {
output <- solve_lp(families = families, parents = parents, n_fam_crosses = n_fam_crosses, max_F = max_F, min_trait = "EBV_dev_squared")
}
output
if(method == "min_F") {
output <- solve_lp(families = families, parents = parents, n_fam_crosses = n_fam_crosses, max_F = max_F, min_trait = "F")
}
output$mating_list <- get_optimal_all_candidates(optimal_families = output$optimal_families,
all_candidates = all_candidates)
output$optimal_families
optimal_families = output$optimal_families
optimal_families$CROSS <- 1:nrow(optimal_families)
sex = "M"
get.parents(all_candidates, optimal_families, sex = "M")
indivs <- all_candidates[all_candidates$SEX == sex, c("ID", "EBV", "FAM")]
colnames(indivs) <- c("INDIV", "INDIV_EBV", "INDIV_FAM")
indivs <- indivs[order(runif(nrow(indivs))),]
if(sex == "M") {
optimal_indivs <- optimal_families[,c("SIRE", "CROSS")]
}
if(sex == "F") {
optimal_indivs <- optimal_families[,c("DAM", "CROSS")]
}
colnames(optimal_indivs) <- c("INDIV", "CROSS")
indivs <- indivs %>%
group_by(INDIV_FAM) %>% # Group the data by 'INDIV_FAM' to rank 'INDIV_EBV' within these groups
# Rank 'INDIV_EBV' values within each group, in descending order.
# 'dense_rank()' assigns sequential ranks, even for tied values (no gaps in ranks).
# The '-' before 'INDIV_EBV' ranks the values in descending order (higher INDIV_EBV gets a lower rank)
mutate(INDIV_RANK = dense_rank(-INDIV_EBV)) %>%
# Ungroup the data so it's no longer grouped by 'INDIV_FAM'
# This is important for further analysis to avoid accidental grouping in later operations
ungroup()
indivs <- as.data.frame(indivs)
indivs
(sum(is.na(indivs$INDIV_FAM))>0)
indivs$INDIV_FAM
(sum(is.na(indivs$INDIV_EBV))>0)
if(sum(is.na(indivs$INDIV_EBV))>0) {
indivs$INDIV_RANK = 0
} else {
indivs <- indivs %>%
group_by(INDIV_FAM) %>% # Group the data by 'INDIV_FAM' to rank 'INDIV_EBV' within these groups
# Rank 'INDIV_EBV' values within each group, in descending order.
# 'dense_rank()' assigns sequential ranks, even for tied values (no gaps in ranks).
# The '-' before 'INDIV_EBV' ranks the values in descending order (higher INDIV_EBV gets a lower rank)
mutate(INDIV_RANK = dense_rank(-INDIV_EBV)) %>%
# Ungroup the data so it's no longer grouped by 'INDIV_FAM'
# This is important for further analysis to avoid accidental grouping in later operations
ungroup()
indivs <- as.data.frame(indivs)
}
optimal_indivs <- left_join(optimal_indivs, indivs, by = "INDIV") #"INDIV", "INDIV_EBV", "INDIV_FAM", "INDIV_RANK", "CROSS"
(mean(optimal_indivs$INDIV_RANK) <= mean(indivs$INDIV_RANK))
if(mean(optimal_indivs$INDIV_RANK) <= mean(indivs$INDIV_RANK)) { #Highest EBV ranked 1
indivs <- indivs[order(indivs$INDIV_EBV , decreasing = T),]
optimal_indivs <- optimal_indivs[order(optimal_indivs$INDIV_EBV, decreasing = T),]
} else {                                                    #Lowest EBV ranked 1
#re-rank in opposite order
indivs <- indivs %>%
group_by(INDIV_FAM) %>%
mutate(INDIV_RANK = dense_rank(INDIV_EBV)) %>%
ungroup()
indivs <- as.data.frame(indivs)
#regenerate optimal_indivs with modified rankings
optimal_indivs <- left_join(optimal_indivs, indivs) #"INDIV", "INDIV_EBV", "INDIV_FAM", "INDIV_RANK", "CROSS"
indivs <- indivs[order(indivs$INDIV_EBV, decreasing = F),]
optimal_indivs <- optimal_indivs[order(optimal_indivs$INDIV_EBV, decreasing = F),]
}
all_indivs <- NULL
for(fam in unique(optimal_indivs$INDIV_FAM)) {
tmp_optimal_indivs <- optimal_indivs[optimal_indivs$INDIV_FAM == fam,]
tmp_optimal_indivs$INDIV_GROUP <- 1:nrow(tmp_optimal_indivs)
tmp_optimal_indivs$CATEGORY <- "Selected"
tmp_indivs <- indivs[indivs$INDIV_FAM == fam,]
tmp_indivs <- tmp_indivs[!tmp_indivs$INDIV %in% tmp_optimal_indivs$INDIV,]
if(nrow(tmp_indivs)> 0) {
tmp_indivs$CATEGORY <- "Backup"
tmp_indivs$INDIV_GROUP <- rep(1:nrow(tmp_optimal_indivs),
ceiling(nrow(tmp_indivs)/nrow(tmp_optimal_indivs)))[1:nrow(tmp_indivs)]
tmp_indivs <- left_join(tmp_indivs, tmp_optimal_indivs[,c("INDIV_FAM", "CROSS", "INDIV_GROUP")], by = c("INDIV_FAM", "INDIV_GROUP"))
tmp_indivs <- tmp_indivs[order(tmp_indivs$INDIV_RANK),]
tmp_indivs <- rbind(tmp_optimal_indivs[,colnames(tmp_indivs)], tmp_indivs)
tmp_indivs <- tmp_indivs[order(tmp_indivs$INDIV_GROUP),c("INDIV", "INDIV_EBV", "INDIV_FAM", "INDIV_RANK", "CROSS", "CATEGORY")]
all_indivs <- rbind(all_indivs, tmp_indivs)
rm(tmp_indivs)
} else {
tmp_optimal_indivs <- tmp_optimal_indivs[,c("INDIV", "INDIV_EBV", "INDIV_FAM", "INDIV_RANK", "CROSS", "CATEGORY")]
all_indivs <- rbind(all_indivs, tmp_optimal_indivs)
}
rm(tmp_optimal_indivs)
}
if(sex == "M") {
colnames(all_indivs) <- c("SIRE", "SIRE_EBV", "SIRE_FAM", "SIRE_RANK", "CROSS", "SIRE_CATEGORY")
}
if(sex == "F") {
colnames(all_indivs) <- c("DAM", "DAM_EBV", "DAM_FAM", "DAM_RANK", "CROSS", "DAM_CATEGORY")
}
return(all_indivs)
indivs[order(runif(nrow(indivs))),]
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/peripheral_functions.R")
ped <- AllocateMate::ped
parents <- AllocateMate::parents
parents$EBV <- NA
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
parents$EBV <- as.numeric(NA)
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/peripheral_functions.R")
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/peripheral_functions.R")
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
output$summary
head(output$all_families)
head(output$optimal_families)
head(output$mating_list)
head(output$A_matrix)
parents <- AllocateMate::parents
parents[1,"EBV"] <- NA
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
head(output$mating_list)
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
ped <- AllocateMate::ped
parents <- AllocateMate::parents
parents$EBV = NA
parents$EBV = as.numeric(NA)
parents[1,"EBV"] <- 7
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
warnings()
ped <- AllocateMate::ped
parents <- AllocateMate::parents
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
parents$EBV = as.numeric(NA)
parents[1,"EBV"] <- 7
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
rm(output)
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
head(output$mating_list)
output$mating_list$DAM_RANK
output$mating_list[!is.na(output$mating_list$DAM_EBV),]
output$mating_list[is.na(output$mating_list$DAM_RANK) | output$mating_list$DAM_RANK != 1,]
output$mating_list[i!s.na(output$mating_list$DAM_RANK) & output$mating_list$DAM_RANK != 1,]
output$mating_list[!is.na(output$mating_list$DAM_RANK) & output$mating_list$DAM_RANK != 1,]
output$mating_list[is.na(output$mating_list$DAM_RANK) & output$mating_list$DAM_RANK == 1,]
$DAM_RANK) & output$mating_list$DAM_RANK == 1,]
write.csv(output$mating_list,"../mating_list.csv", row.names = f)
write.csv(output$mating_list,"../mating_list.csv", row.names = f)
write.csv(output$mating_list,"../mating_list.csv", row.names = F)
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/peripheral_functions.R")
(sum(is.na(indivs$INDIV_EBV)) == nrow(indivs) | sum(is.na(indivs$INDIV_EBV)) == 0)
sum(is.na(indivs$INDIV_EBV)) == 0
sum(is.na(indivs$INDIV_EBV)) == nrow(indivs)
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/peripheral_functions.R")
parents
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
head(output$mating_list)
output$mating_list[is.na(output$mating_list$DAM_RANK) & output$mating_list$DAM_RANK == 1,]
output$mating_list[is.na(output$mating_list$DAM_RANK) | output$mating_list$DAM_RANK != 1,]
output$mating_list
ped <- AllocateMate::ped
parents <- AllocateMate::parents
parents$EBV <- NA
parents[1,"EBV"] <- 7
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "assortative", n_fam_crosses = 1)
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "assortative", n_fam_crosses = 1)
outputs
output
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "assortative", n_fam_crosses = 1)
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/peripheral_functions.R")
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/allocate.mate.ped.R")
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
remove.packages("AllocateMate")
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
rm(allocate.mate.H)
rm("allocate.mate.H")
rm(allocate.mate.ped)
rm(list=ls())
ped <- AllocateMate::ped
parents <- AllocateMate::parents
parents$EBV=NA
parents[1,"EBV"] <= 7
parents[1,"EBV"] <- 7
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
ped <- AllocateMate::ped
parents <- AllocateMate::parents
parents$EBV <- -parents$EBV
parents$EBV
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
(output$mating_list)
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/peripheral_functions.R")
ped <- AllocateMate::ped
parents <- AllocateMate::parents
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
ped <- AllocateMate::ped
parents <- AllocateMate::parents
indivs$EBV <- -indivs$EBV
parents$EBV <- -parents$EBV
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
head(output$mating_list)
ped <- AllocateMate::ped
parents <- AllocateMate::parents
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
head(output$mating_list)
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/peripheral_functions.R")
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/peripheral_functions.R")
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/peripheral_functions.R")
ped <- AllocateMate::ped
parents <- AllocateMate::parents
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
ped <- AllocateMate::ped
parents <- AllocateMate::parents
parents$EBV <- -parents$EBV
ped <- AllocateMate::ped
parents <- AllocateMate::parents
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/peripheral_functions.R")
ped <- AllocateMate::ped
parents <- AllocateMate::parents
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/peripheral_functions.R")
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/allocate.mate.ped.R")
ped <- AllocateMate::ped
parents <- AllocateMate::parents
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
ped <- AllocateMate::ped
parents <- AllocateMate::parents
parents$EBV <- -parents$EBV
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/peripheral_functions.R")
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/peripheral_functions.R")
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/peripheral_functions.R")
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/peripheral_functions.R")
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/peripheral_functions.R")
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/peripheral_functions.R")
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/peripheral_functions.R")
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
source("C:/Users/MHamilton/OneDrive - CGIAR/Desktop/allocatemate/R/peripheral_functions.R")
output <- allocate.mate.ped(ped, parents, max_F = 0.02, method = "min_F", n_fam_crosses = 1)
head(output$mating_list)
